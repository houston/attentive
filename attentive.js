/* Generated by Opal 0.9.2 */
Opal.modules["attentive/version"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base) {
    var $Attentive, self = $Attentive = $module($base, 'Attentive');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.cdecl($scope, 'VERSION', "0.1.1")
  })($scope.base)
};

/* Generated by Opal 0.9.2 */
Opal.modules["attentive/config"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$attr_reader', '$flatten']);
  return (function($base) {
    var $Attentive, self = $Attentive = $module($base, 'Attentive');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Config, self = $Config = $module($base, 'Config');

      var def = self.$$proto, $scope = self.$$scope;

      self.$attr_reader("invocations");

      Opal.defn(self, '$invocations=', function() {
        var self = this, $splat_index = nil;

        var array_size = arguments.length - 0;
        if(array_size < 0) array_size = 0;
        var values = new Array(array_size);
        for($splat_index = 0; $splat_index < array_size; $splat_index++) {
          values[$splat_index] = arguments[$splat_index + 0];
        }
        return self.invocations = values.$flatten();
      });
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.9.2 */
Opal.modules["set"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$include', '$new', '$nil?', '$===', '$raise', '$each', '$add', '$call', '$merge', '$class', '$respond_to?', '$subtract', '$dup', '$join', '$to_a', '$equal?', '$instance_of?', '$==', '$instance_variable_get', '$is_a?', '$size', '$all?', '$include?', '$[]=', '$enum_for', '$[]', '$<<', '$replace', '$delete', '$select', '$each_key', '$to_proc', '$empty?', '$eql?', '$instance_eval', '$clear', '$<', '$<=', '$keys']);
  (function($base, $super) {
    function $Set(){};
    var self = $Set = $klass($base, $super, 'Set', $Set);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_4, TMP_7, TMP_9, TMP_12;

    def.hash = nil;
    self.$include($scope.get('Enumerable'));

    Opal.defs(self, '$[]', function() {
      var self = this, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var ary = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        ary[$splat_index] = arguments[$splat_index + 0];
      }
      return self.$new(ary);
    });

    Opal.defn(self, '$initialize', TMP_1 = function(enum$) {
      var $a, $b, TMP_2, self = this, $iter = TMP_1.$$p, block = $iter || nil;

      if (enum$ == null) {
        enum$ = nil
      }
      TMP_1.$$p = null;
      self.hash = $scope.get('Hash').$new();
      if ((($a = enum$['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return nil};
      if ((($a = $scope.get('Enumerable')['$==='](enum$)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "value must be enumerable")
      };
      if (block !== false && block !== nil) {
        return ($a = ($b = enum$).$each, $a.$$p = (TMP_2 = function(item){var self = TMP_2.$$s || this;
if (item == null) item = nil;
        return self.$add(block.$call(item))}, TMP_2.$$s = self, TMP_2), $a).call($b)
        } else {
        return self.$merge(enum$)
      };
    });

    Opal.defn(self, '$dup', function() {
      var self = this, result = nil;

      result = self.$class().$new();
      return result.$merge(self);
    });

    Opal.defn(self, '$-', function(enum$) {
      var $a, self = this;

      if ((($a = enum$['$respond_to?']("each")) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "value must be enumerable")
      };
      return self.$dup().$subtract(enum$);
    });

    Opal.alias(self, 'difference', '-');

    Opal.defn(self, '$inspect', function() {
      var self = this;

      return "#<Set: {" + (self.$to_a().$join(",")) + "}>";
    });

    Opal.defn(self, '$==', function(other) {
      var $a, $b, TMP_3, self = this;

      if ((($a = self['$equal?'](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return true
      } else if ((($a = other['$instance_of?'](self.$class())) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.hash['$=='](other.$instance_variable_get("@hash"))
      } else if ((($a = ($b = other['$is_a?']($scope.get('Set')), $b !== false && $b !== nil ?self.$size()['$=='](other.$size()) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = other)['$all?'], $a.$$p = (TMP_3 = function(o){var self = TMP_3.$$s || this;
          if (self.hash == null) self.hash = nil;
if (o == null) o = nil;
        return self.hash['$include?'](o)}, TMP_3.$$s = self, TMP_3), $a).call($b)
        } else {
        return false
      };
    });

    Opal.defn(self, '$add', function(o) {
      var self = this;

      self.hash['$[]='](o, true);
      return self;
    });

    Opal.alias(self, '<<', 'add');

    Opal.defn(self, '$classify', TMP_4 = function() {
      var $a, $b, TMP_5, $c, TMP_6, self = this, $iter = TMP_4.$$p, block = $iter || nil, result = nil;

      TMP_4.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("classify")
      };
      result = ($a = ($b = $scope.get('Hash')).$new, $a.$$p = (TMP_5 = function(h, k){var self = TMP_5.$$s || this;
if (h == null) h = nil;if (k == null) k = nil;
      return h['$[]='](k, self.$class().$new())}, TMP_5.$$s = self, TMP_5), $a).call($b);
      ($a = ($c = self).$each, $a.$$p = (TMP_6 = function(item){var self = TMP_6.$$s || this, $a;
if (item == null) item = nil;
      return result['$[]'](((($a = Opal.yield1(block, item)) === $breaker) ? $breaker.$v : $a)).$add(item)}, TMP_6.$$s = self, TMP_6), $a).call($c);
      return result;
    });

    Opal.defn(self, '$collect!', TMP_7 = function() {
      var $a, $b, TMP_8, self = this, $iter = TMP_7.$$p, block = $iter || nil, result = nil;

      TMP_7.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("collect!")
      };
      result = self.$class().$new();
      ($a = ($b = self).$each, $a.$$p = (TMP_8 = function(item){var self = TMP_8.$$s || this, $a;
if (item == null) item = nil;
      return result['$<<'](((($a = Opal.yield1(block, item)) === $breaker) ? $breaker.$v : $a))}, TMP_8.$$s = self, TMP_8), $a).call($b);
      return self.$replace(result);
    });

    Opal.alias(self, 'map!', 'collect!');

    Opal.defn(self, '$delete', function(o) {
      var self = this;

      self.hash.$delete(o);
      return self;
    });

    Opal.defn(self, '$delete?', function(o) {
      var $a, self = this;

      if ((($a = self['$include?'](o)) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$delete(o);
        return self;
        } else {
        return nil
      };
    });

    Opal.defn(self, '$delete_if', TMP_9 = function() {try {

      var $a, $b, TMP_10, $c, $d, TMP_11, self = this, $iter = TMP_9.$$p, $yield = $iter || nil;

      TMP_9.$$p = null;
      ((($a = ($yield !== nil)) !== false && $a !== nil) ? $a : Opal.ret(self.$enum_for("delete_if")));
      ($a = ($b = ($c = ($d = self).$select, $c.$$p = (TMP_11 = function(o){var self = TMP_11.$$s || this, $a;
if (o == null) o = nil;
      return $a = Opal.yield1($yield, o), $a === $breaker ? $a : $a}, TMP_11.$$s = self, TMP_11), $c).call($d)).$each, $a.$$p = (TMP_10 = function(o){var self = TMP_10.$$s || this;
        if (self.hash == null) self.hash = nil;
if (o == null) o = nil;
      return self.hash.$delete(o)}, TMP_10.$$s = self, TMP_10), $a).call($b);
      return self;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    });

    Opal.defn(self, '$add?', function(o) {
      var $a, self = this;

      if ((($a = self['$include?'](o)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return nil
        } else {
        return self.$add(o)
      };
    });

    Opal.defn(self, '$each', TMP_12 = function() {
      var $a, $b, self = this, $iter = TMP_12.$$p, block = $iter || nil;

      TMP_12.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each")
      };
      ($a = ($b = self.hash).$each_key, $a.$$p = block.$to_proc(), $a).call($b);
      return self;
    });

    Opal.defn(self, '$empty?', function() {
      var self = this;

      return self.hash['$empty?']();
    });

    Opal.defn(self, '$eql?', function(other) {
      var $a, $b, TMP_13, self = this;

      return self.hash['$eql?'](($a = ($b = other).$instance_eval, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this;
        if (self.hash == null) self.hash = nil;

      return self.hash}, TMP_13.$$s = self, TMP_13), $a).call($b));
    });

    Opal.defn(self, '$clear', function() {
      var self = this;

      self.hash.$clear();
      return self;
    });

    Opal.defn(self, '$include?', function(o) {
      var self = this;

      return self.hash['$include?'](o);
    });

    Opal.alias(self, 'member?', 'include?');

    Opal.defn(self, '$merge', function(enum$) {
      var $a, $b, TMP_14, self = this;

      ($a = ($b = enum$).$each, $a.$$p = (TMP_14 = function(item){var self = TMP_14.$$s || this;
if (item == null) item = nil;
      return self.$add(item)}, TMP_14.$$s = self, TMP_14), $a).call($b);
      return self;
    });

    Opal.defn(self, '$replace', function(enum$) {
      var self = this;

      self.$clear();
      self.$merge(enum$);
      return self;
    });

    Opal.defn(self, '$size', function() {
      var self = this;

      return self.hash.$size();
    });

    Opal.alias(self, 'length', 'size');

    Opal.defn(self, '$subtract', function(enum$) {
      var $a, $b, TMP_15, self = this;

      ($a = ($b = enum$).$each, $a.$$p = (TMP_15 = function(item){var self = TMP_15.$$s || this;
if (item == null) item = nil;
      return self.$delete(item)}, TMP_15.$$s = self, TMP_15), $a).call($b);
      return self;
    });

    Opal.defn(self, '$|', function(enum$) {
      var $a, self = this;

      if ((($a = enum$['$respond_to?']("each")) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "value must be enumerable")
      };
      return self.$dup().$merge(enum$);
    });

    Opal.defn(self, '$superset?', function(set) {
      var $a, $b, TMP_16, self = this;

      ((($a = set['$is_a?']($scope.get('Set'))) !== false && $a !== nil) ? $a : self.$raise($scope.get('ArgumentError'), "value must be a set"));
      if ((($a = $rb_lt(self.$size(), set.$size())) !== nil && (!$a.$$is_boolean || $a == true))) {
        return false};
      return ($a = ($b = set)['$all?'], $a.$$p = (TMP_16 = function(o){var self = TMP_16.$$s || this;
if (o == null) o = nil;
      return self['$include?'](o)}, TMP_16.$$s = self, TMP_16), $a).call($b);
    });

    Opal.alias(self, '>=', 'superset?');

    Opal.defn(self, '$proper_superset?', function(set) {
      var $a, $b, TMP_17, self = this;

      ((($a = set['$is_a?']($scope.get('Set'))) !== false && $a !== nil) ? $a : self.$raise($scope.get('ArgumentError'), "value must be a set"));
      if ((($a = $rb_le(self.$size(), set.$size())) !== nil && (!$a.$$is_boolean || $a == true))) {
        return false};
      return ($a = ($b = set)['$all?'], $a.$$p = (TMP_17 = function(o){var self = TMP_17.$$s || this;
if (o == null) o = nil;
      return self['$include?'](o)}, TMP_17.$$s = self, TMP_17), $a).call($b);
    });

    Opal.alias(self, '>', 'proper_superset?');

    Opal.defn(self, '$subset?', function(set) {
      var $a, $b, TMP_18, self = this;

      ((($a = set['$is_a?']($scope.get('Set'))) !== false && $a !== nil) ? $a : self.$raise($scope.get('ArgumentError'), "value must be a set"));
      if ((($a = $rb_lt(set.$size(), self.$size())) !== nil && (!$a.$$is_boolean || $a == true))) {
        return false};
      return ($a = ($b = self)['$all?'], $a.$$p = (TMP_18 = function(o){var self = TMP_18.$$s || this;
if (o == null) o = nil;
      return set['$include?'](o)}, TMP_18.$$s = self, TMP_18), $a).call($b);
    });

    Opal.alias(self, '<=', 'subset?');

    Opal.defn(self, '$proper_subset?', function(set) {
      var $a, $b, TMP_19, self = this;

      ((($a = set['$is_a?']($scope.get('Set'))) !== false && $a !== nil) ? $a : self.$raise($scope.get('ArgumentError'), "value must be a set"));
      if ((($a = $rb_le(set.$size(), self.$size())) !== nil && (!$a.$$is_boolean || $a == true))) {
        return false};
      return ($a = ($b = self)['$all?'], $a.$$p = (TMP_19 = function(o){var self = TMP_19.$$s || this;
if (o == null) o = nil;
      return set['$include?'](o)}, TMP_19.$$s = self, TMP_19), $a).call($b);
    });

    Opal.alias(self, '<', 'proper_subset?');

    Opal.alias(self, '+', '|');

    Opal.alias(self, 'union', '|');

    return (Opal.defn(self, '$to_a', function() {
      var self = this;

      return self.hash.$keys();
    }), nil) && 'to_a';
  })($scope.base, null);
  return (function($base) {
    var $Enumerable, self = $Enumerable = $module($base, 'Enumerable');

    var def = self.$$proto, $scope = self.$$scope, TMP_20;

    Opal.defn(self, '$to_set', TMP_20 = function(klass) {
      var $a, $b, self = this, $iter = TMP_20.$$p, block = $iter || nil, $splat_index = nil;

      var array_size = arguments.length - 1;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 1];
      }
      if (klass == null) {
        klass = $scope.get('Set')
      }
      TMP_20.$$p = null;
      return ($a = ($b = klass).$new, $a.$$p = block.$to_proc(), $a).apply($b, [self].concat(Opal.to_a(args)));
    })
  })($scope.base);
};

/* Generated by Opal 0.9.2 */
Opal.modules["attentive/abbreviations"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$freeze']);
  return (function($base) {
    var $Attentive, self = $Attentive = $module($base, 'Attentive');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.cdecl($scope, 'ABBREVIATIONS', $hash2(["bye", "gonna", "hi", "ol'", "'sup", "thanks", "wanna", "mon", "tue", "tues", "wed", "thu", "thur", "thurs", "fri", "sat", "sun"], {"bye": "goodbye", "gonna": "going to", "hi": "hello", "ol'": "old", "'sup": "what is up", "thanks": "thank you", "wanna": "want to", "mon": "monday", "tue": "tuesday", "tues": "tuesday", "wed": "wednesday", "thu": "thursday", "thur": "thursday", "thurs": "thursday", "fri": "friday", "sat": "saturday", "sun": "sunday"}).$freeze())
  })($scope.base)
};

/* Generated by Opal 0.9.2 */
Opal.modules["attentive/contractions"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$freeze']);
  return (function($base) {
    var $Attentive, self = $Attentive = $module($base, 'Attentive');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.cdecl($scope, 'CONTRACTIONS', $hash2(["ain't", "aren't", "can't", "cannot", "could've", "couldn't", "couldn't've", "didn't", "doesn't", "don't", "hadn't", "hadn't've", "hasn't", "haven't", "he'd", "he'd've", "he'll", "he's", "he'sn't", "how'd", "how'll", "how's", "i'd", "i'd've", "i'll", "i'm", "i've", "i'ven't", "isn't", "it'd", "it'd've", "it'll", "it's", "it'sn't", "let's", "ma'am", "mightn't", "mightn't've", "might've", "mustn't", "must've", "needn't", "not've", "o'clock", "oughtn't", "shan't", "she'd", "she'd've", "she'll", "she's", "she'sn't", "should've", "shouldn't", "shouldn't've", "somebody'd", "somebody'd've", "somebody'dn't've", "somebody'll", "somebody's", "someone'd", "someone'd've", "someone'll", "someone's", "something'd", "something'd've", "something'll", "something's", "that'll", "that's", "there'd", "there'd've", "there're", "there's", "they'd", "they'dn't", "they'dn't've", "they'd've", "they'd'ven't", "they'll", "they'lln't've", "they'll'ven't", "they're", "they've", "they'ven't", "'tis", "'twas", "wasn't", "we'd", "we'd've", "we'dn't've", "we'll", "we'lln't've", "we're", "we've", "weren't", "what'll", "what're", "what's", "what've", "when's", "where'd", "where's", "where've", "who'd", "who'd've", "who'll", "who're", "who's", "who've", "why'll", "why're", "why's", "won't", "won't've", "would've", "wouldn't", "wouldn't've", "y'all", "y'all'd've", "y'all'dn't've", "y'all'll", "y'all'lln't", "y'all'll've", "y'all'll'ven't", "you'd", "you'd've", "you'll", "you're", "you'ren't", "you've", "you'ven't"], {"ain't": ["am not"], "aren't": ["are not"], "can't": ["can not"], "cannot": ["can not"], "could've": ["could have"], "couldn't": ["could not"], "couldn't've": ["could not have"], "didn't": ["did not"], "doesn't": ["does not"], "don't": ["do not"], "hadn't": ["had not"], "hadn't've": ["had not have"], "hasn't": ["has not"], "haven't": ["have not"], "he'd": ["he had", "he would"], "he'd've": ["he would have"], "he'll": ["he will", "he shall"], "he's": ["he is", "he has"], "he'sn't": ["he is not", "he has not"], "how'd": ["how did", "how would"], "how'll": ["how will"], "how's": ["how is", "how has", "how does"], "i'd": ["i would", "i had"], "i'd've": ["i would have"], "i'll": ["i shall", "i will"], "i'm": ["i am"], "i've": ["i have"], "i'ven't": ["i have not"], "isn't": ["is not"], "it'd": ["it would", "it had"], "it'd've": ["it would have"], "it'll": ["it will", "it shall"], "it's": ["it is", "it has"], "it'sn't": ["it is not", "it has not"], "let's": ["let us"], "ma'am": ["madam"], "mightn't": ["might not"], "mightn't've": ["might not have"], "might've": ["might have"], "mustn't": ["must not"], "must've": ["must have"], "needn't": ["need not"], "not've": ["not have"], "o'clock": ["of the clock"], "oughtn't": ["ought not"], "shan't": ["shall not"], "she'd": ["she had", "she would"], "she'd've": ["she would have"], "she'll": ["she shall", "she will"], "she's": ["she is", "she has"], "she'sn't": ["she is not", "she has not"], "should've": ["should have"], "shouldn't": ["should not"], "shouldn't've": ["should not have"], "somebody'd": ["somebody had", "somebody would"], "somebody'd've": ["somebody would have"], "somebody'dn't've": ["somebody would not have"], "somebody'll": ["somebody shall", "somebody will"], "somebody's": ["somebody is", "somebody has"], "someone'd": ["someone had", "someone would"], "someone'd've": ["someone would have"], "someone'll": ["someone shall", "someone will"], "someone's": ["someone is", "someone has"], "something'd": ["something had", "something would"], "something'd've": ["something would have"], "something'll": ["something shall", "something will"], "something's": ["something is", "something has"], "that'll": ["that will"], "that's": ["that is", "that has"], "there'd": ["there had", "there would"], "there'd've": ["there would have"], "there're": ["there are"], "there's": ["there is", "there has"], "they'd": ["they would", "they had"], "they'dn't": ["they would not"], "they'dn't've": ["they would not have"], "they'd've": ["they would have"], "they'd'ven't": ["they would have not"], "they'll": ["they shall", "they will"], "they'lln't've": ["they will not have"], "they'll'ven't": ["they will have not"], "they're": ["they are"], "they've": ["they have"], "they'ven't": ["they have not"], "'tis": ["it is"], "'twas": ["it was"], "wasn't": ["was not"], "we'd": ["we had", "we would"], "we'd've": ["we would have"], "we'dn't've": ["we would not have"], "we'll": ["we will"], "we'lln't've": ["we will not have"], "we're": ["we are"], "we've": ["we have"], "weren't": ["were not"], "what'll": ["what shall", "what will"], "what're": ["what are"], "what's": ["what is", "what does", "what has"], "what've": ["what have"], "when's": ["when is", "when has"], "where'd": ["where did"], "where's": ["where is", "where does", "where has"], "where've": ["where have"], "who'd": ["who would", "who had"], "who'd've": ["who would have"], "who'll": ["who shall", "who will"], "who're": ["who are"], "who's": ["who is", "who has"], "who've": ["who have"], "why'll": ["why will"], "why're": ["why are"], "why's": ["why is", "why has"], "won't": ["will not"], "won't've": ["will not have"], "would've": ["would have"], "wouldn't": ["would not"], "wouldn't've": ["would not have"], "y'all": ["you all"], "y'all'd've": ["you all would have"], "y'all'dn't've": ["you all would not have"], "y'all'll": ["you all will"], "y'all'lln't": ["you all will not"], "y'all'll've": ["you all will have"], "y'all'll'ven't": ["you all will have not"], "you'd": ["you had", "you would"], "you'd've": ["you would have"], "you'll": ["you shall", "you will"], "you're": ["you are"], "you'ren't": ["you are not"], "you've": ["you have"], "you'ven't": ["you have not"]}).$freeze())
  })($scope.base)
};

/* Generated by Opal 0.9.2 */
Opal.modules["attentive/text"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$extend', '$straighten_quotes', '$downcase', '$gsub']);
  return (function($base) {
    var $Attentive, self = $Attentive = $module($base, 'Attentive');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Text, self = $Text = $module($base, 'Text');

      var def = self.$$proto, $scope = self.$$scope;

      self.$extend(self);

      Opal.defn(self, '$normalize', function(text) {
        var self = this;

        return self.$straighten_quotes(self.$downcase(text));
      });

      Opal.defn(self, '$downcase', function(text) {
        var self = this;

        return text.$downcase();
      });

      Opal.defn(self, '$straighten_quotes', function(text) {
        var self = this;

        return text.$gsub(/[“”]/, "\"").$gsub(/[‘’]/, "'");
      });
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.9.2 */
Opal.modules["attentive/token"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader', '$==', '$class', '$peek', '$to_s', '$string']);
  return (function($base) {
    var $Attentive, self = $Attentive = $module($base, 'Attentive');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Token(){};
      var self = $Token = $klass($base, $super, 'Token', $Token);

      var def = self.$$proto, $scope = self.$$scope;

      self.$attr_reader("pos");

      Opal.defn(self, '$initialize', function(pos) {
        var self = this;

        if (pos == null) {
          pos = nil
        }
        return self.pos = pos;
      });

      Opal.defn(self, '$==', function(other) {
        var self = this;

        return self.$class()['$=='](other.$class());
      });

      Opal.defn(self, '$ambiguous?', function() {
        var self = this;

        return false;
      });

      Opal.defn(self, '$entity?', function() {
        var self = this;

        return false;
      });

      Opal.defn(self, '$whitespace?', function() {
        var self = this;

        return false;
      });

      Opal.defn(self, '$skippable?', function() {
        var self = this;

        return false;
      });

      return (Opal.defn(self, '$matches?', function(cursor) {
        var self = this;

        return self['$=='](cursor.$peek());
      }), nil) && 'matches?';
    })($scope.base, null);

    (function($base, $super) {
      function $StringToken(){};
      var self = $StringToken = $klass($base, $super, 'StringToken', $StringToken);

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      self.$attr_reader("string");

      Opal.defn(self, '$initialize', TMP_1 = function(string, pos) {
        var self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

        if (pos == null) {
          pos = nil
        }
        TMP_1.$$p = null;
        self.string = string;
        return Opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [pos]);
      });

      Opal.defn(self, '$to_str', function() {
        var self = this;

        return self.$to_s();
      });

      Opal.defn(self, '$to_s', function() {
        var self = this;

        return self.$string();
      });

      return (Opal.defn(self, '$==', function(other) {
        var $a, self = this;

        return (($a = self.$class()['$=='](other.$class())) ? self.$string()['$=='](other.$string()) : self.$class()['$=='](other.$class()));
      }), nil) && '==';
    })($scope.base, $scope.get('Token'));
  })($scope.base)
};

/* Generated by Opal 0.9.2 */
Opal.modules["attentive/tokens/any_of"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$attr_reader', '$==', '$class', '$possibilities']);
  self.$require("attentive/token");
  return (function($base) {
    var $Attentive, self = $Attentive = $module($base, 'Attentive');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Tokens, self = $Tokens = $module($base, 'Tokens');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $AnyOf(){};
        var self = $AnyOf = $klass($base, $super, 'AnyOf', $AnyOf);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        self.$attr_reader("possibilities");

        Opal.defn(self, '$initialize', TMP_1 = function(possibilities, pos) {
          var self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

          TMP_1.$$p = null;
          self.possibilities = possibilities;
          return Opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [pos]);
        });

        Opal.defn(self, '$==', function(other) {
          var $a, self = this;

          return (($a = self.$class()['$=='](other.$class())) ? self.$possibilities()['$=='](other.$possibilities()) : self.$class()['$=='](other.$class()));
        });

        return (Opal.defn(self, '$ambiguous?', function() {
          var self = this;

          return true;
        }), nil) && 'ambiguous?';
      })($scope.base, $scope.get('Token'))
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.9.2 */
Opal.modules["attentive/tokens/emoji"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$string']);
  self.$require("attentive/token");
  return (function($base) {
    var $Attentive, self = $Attentive = $module($base, 'Attentive');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Tokens, self = $Tokens = $module($base, 'Tokens');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Emoji(){};
        var self = $Emoji = $klass($base, $super, 'Emoji', $Emoji);

        var def = self.$$proto, $scope = self.$$scope;

        Opal.defn(self, '$to_s', function() {
          var self = this;

          return ":" + (self.$string()) + ":";
        });

        return (Opal.defn(self, '$skippable?', function() {
          var self = this;

          return true;
        }), nil) && 'skippable?';
      })($scope.base, $scope.get('StringToken'))
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.9.2 */
Opal.modules["attentive/tokens/invocation"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$==', '$class']);
  self.$require("attentive/token");
  return (function($base) {
    var $Attentive, self = $Attentive = $module($base, 'Attentive');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Tokens, self = $Tokens = $module($base, 'Tokens');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Invocation(){};
        var self = $Invocation = $klass($base, $super, 'Invocation', $Invocation);

        var def = self.$$proto, $scope = self.$$scope;

        Opal.defn(self, '$==', function(other) {
          var self = this;

          return self.$class()['$=='](other.$class());
        });

        return (Opal.defn(self, '$skippable?', function() {
          var self = this;

          return true;
        }), nil) && 'skippable?';
      })($scope.base, $scope.get('StringToken'))
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.9.2 */
Opal.modules["attentive/tokens/punctuation"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require']);
  self.$require("attentive/token");
  return (function($base) {
    var $Attentive, self = $Attentive = $module($base, 'Attentive');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Tokens, self = $Tokens = $module($base, 'Tokens');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Punctuation(){};
        var self = $Punctuation = $klass($base, $super, 'Punctuation', $Punctuation);

        var def = self.$$proto, $scope = self.$$scope;

        return (Opal.defn(self, '$skippable?', function() {
          var self = this;

          return true;
        }), nil) && 'skippable?'
      })($scope.base, $scope.get('StringToken'))
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.9.2 */
Opal.modules["attentive/tokens/regexp"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$require', '$attr_reader', '$new', '$==', '$class', '$regexp', '$match', '$to_s', '$[]', '$inspect']);
  self.$require("attentive/token");
  return (function($base) {
    var $Attentive, self = $Attentive = $module($base, 'Attentive');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Tokens, self = $Tokens = $module($base, 'Tokens');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Regexp(){};
        var self = $Regexp = $klass($base, $super, 'Regexp', $Regexp);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        self.$attr_reader("regexp");

        Opal.defn(self, '$initialize', TMP_1 = function(string, pos) {
          var self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

          TMP_1.$$p = null;
          self.regexp = Opal.get('Regexp').$new("^" + (string));
          return Opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [pos]);
        });

        Opal.defn(self, '$==', function(other) {
          var $a, self = this;

          return (($a = self.$class()['$=='](other.$class())) ? self.$regexp()['$=='](other.$regexp()) : self.$class()['$=='](other.$class()));
        });

        Opal.defn(self, '$matches?', function(cursor) {
          var self = this;

          return self.$regexp().$match(cursor.$to_s());
        });

        return (Opal.defn(self, '$to_s', function() {
          var self = this;

          return self.$regexp().$inspect()['$[]']($range(1, -1, true));
        }), nil) && 'to_s';
      })($scope.base, $scope.get('Token'))
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.9.2 */
Opal.modules["attentive/tokens/whitespace"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$==', '$class']);
  self.$require("attentive/token");
  return (function($base) {
    var $Attentive, self = $Attentive = $module($base, 'Attentive');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Tokens, self = $Tokens = $module($base, 'Tokens');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Whitespace(){};
        var self = $Whitespace = $klass($base, $super, 'Whitespace', $Whitespace);

        var def = self.$$proto, $scope = self.$$scope;

        Opal.defn(self, '$==', function(other) {
          var self = this;

          return self.$class()['$=='](other.$class());
        });

        Opal.defn(self, '$skippable?', function() {
          var self = this;

          return true;
        });

        return (Opal.defn(self, '$whitespace?', function() {
          var self = this;

          return true;
        }), nil) && 'whitespace?';
      })($scope.base, $scope.get('StringToken'))
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.9.2 */
Opal.modules["attentive/tokens/word"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require']);
  self.$require("attentive/token");
  return (function($base) {
    var $Attentive, self = $Attentive = $module($base, 'Attentive');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Tokens, self = $Tokens = $module($base, 'Tokens');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Word(){};
        var self = $Word = $klass($base, $super, 'Word', $Word);

        var def = self.$$proto, $scope = self.$$scope;

        return nil;
      })($scope.base, $scope.get('StringToken'))
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.9.2 */
Opal.modules["attentive/tokens"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$new', '$[]', '$to_sym', '$require']);
  (function($base) {
    var $Attentive, self = $Attentive = $module($base, 'Attentive');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Tokens, self = $Tokens = $module($base, 'Tokens');

      var def = self.$$proto, $scope = self.$$scope;

      Opal.defn(self, '$any_of', function(possibilities, $kwargs) {
        var self = this, pos = nil;

        if ($kwargs == null) {
          $kwargs = $hash2([], {});
        }
        if (!$kwargs.$$is_hash) {
          throw Opal.ArgumentError.$new('expecting keyword args');
        }
        if ((pos = $kwargs.$$smap['pos']) == null) {
          pos = nil
        }
        return (((($scope.get('Attentive')).$$scope.get('Tokens'))).$$scope.get('AnyOf')).$new(possibilities, pos);
      });

      Opal.defn(self, '$emoji', function(string, $kwargs) {
        var self = this, pos = nil;

        if ($kwargs == null) {
          $kwargs = $hash2([], {});
        }
        if (!$kwargs.$$is_hash) {
          throw Opal.ArgumentError.$new('expecting keyword args');
        }
        if ((pos = $kwargs.$$smap['pos']) == null) {
          pos = nil
        }
        return (((($scope.get('Attentive')).$$scope.get('Tokens'))).$$scope.get('Emoji')).$new(string, pos);
      });

      Opal.defn(self, '$entity', function(entity_name, variable_name, $kwargs) {
        var self = this, pos = nil;

        if (variable_name == null) {
          variable_name = entity_name
        }
        if (variable_name == null) {
          $kwargs = $hash2([], {});
        }
        else if (variable_name.$$is_hash) {
          $kwargs = variable_name;
          variable_name = entity_name;
        }
        else if ($kwargs == null) {
          $kwargs = $hash2([], {});
        }
        if (!$kwargs.$$is_hash) {
          throw Opal.ArgumentError.$new('expecting keyword args');
        }
        if ((pos = $kwargs.$$smap['pos']) == null) {
          pos = nil
        }
        return (($scope.get('Attentive')).$$scope.get('Entity'))['$[]'](entity_name.$to_sym()).$new(variable_name);
      });

      Opal.defn(self, '$invocation', function(string, $kwargs) {
        var self = this, pos = nil;

        if ($kwargs == null) {
          $kwargs = $hash2([], {});
        }
        if (!$kwargs.$$is_hash) {
          throw Opal.ArgumentError.$new('expecting keyword args');
        }
        if ((pos = $kwargs.$$smap['pos']) == null) {
          pos = nil
        }
        return (((($scope.get('Attentive')).$$scope.get('Tokens'))).$$scope.get('Invocation')).$new(string, pos);
      });

      Opal.defn(self, '$punctuation', function(string, $kwargs) {
        var self = this, pos = nil;

        if ($kwargs == null) {
          $kwargs = $hash2([], {});
        }
        if (!$kwargs.$$is_hash) {
          throw Opal.ArgumentError.$new('expecting keyword args');
        }
        if ((pos = $kwargs.$$smap['pos']) == null) {
          pos = nil
        }
        return (((($scope.get('Attentive')).$$scope.get('Tokens'))).$$scope.get('Punctuation')).$new(string, pos);
      });

      Opal.defn(self, '$regexp', function(string, $kwargs) {
        var self = this, pos = nil;

        if ($kwargs == null) {
          $kwargs = $hash2([], {});
        }
        if (!$kwargs.$$is_hash) {
          throw Opal.ArgumentError.$new('expecting keyword args');
        }
        if ((pos = $kwargs.$$smap['pos']) == null) {
          pos = nil
        }
        return (((($scope.get('Attentive')).$$scope.get('Tokens'))).$$scope.get('Regexp')).$new(string, pos);
      });

      Opal.defn(self, '$whitespace', function(string, $kwargs) {
        var self = this, pos = nil;

        if ($kwargs == null) {
          $kwargs = $hash2([], {});
        }
        if (!$kwargs.$$is_hash) {
          throw Opal.ArgumentError.$new('expecting keyword args');
        }
        if ((pos = $kwargs.$$smap['pos']) == null) {
          pos = nil
        }
        return (((($scope.get('Attentive')).$$scope.get('Tokens'))).$$scope.get('Whitespace')).$new(string, pos);
      });

      Opal.defn(self, '$word', function(string, $kwargs) {
        var self = this, pos = nil;

        if ($kwargs == null) {
          $kwargs = $hash2([], {});
        }
        if (!$kwargs.$$is_hash) {
          throw Opal.ArgumentError.$new('expecting keyword args');
        }
        if ((pos = $kwargs.$$smap['pos']) == null) {
          pos = nil
        }
        return (((($scope.get('Attentive')).$$scope.get('Tokens'))).$$scope.get('Word')).$new(string, pos);
      });
    })($scope.base)
  })($scope.base);
  self.$require("attentive/tokens/any_of");
  self.$require("attentive/tokens/emoji");
  self.$require("attentive/tokens/invocation");
  self.$require("attentive/tokens/punctuation");
  self.$require("attentive/tokens/regexp");
  self.$require("attentive/tokens/whitespace");
  return self.$require("attentive/tokens/word");
};

/* Generated by Opal 0.9.2 */
Opal.modules["delegate"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$__setobj__', '$__getobj__', '$respond_to?', '$__send__', '$to_proc']);
  (function($base, $super) {
    function $Delegator(){};
    var self = $Delegator = $klass($base, $super, 'Delegator', $Delegator);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    Opal.defn(self, '$initialize', function(obj) {
      var self = this;

      return self.$__setobj__(obj);
    });

    return (Opal.defn(self, '$method_missing', TMP_1 = function(m) {
      var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil, target = nil, $splat_index = nil;

      var array_size = arguments.length - 1;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 1];
      }
      TMP_1.$$p = null;
      target = self.$__getobj__();
      if ((($a = target['$respond_to?'](m)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = target).$__send__, $a.$$p = block.$to_proc(), $a).apply($b, [m].concat(Opal.to_a(args)))
        } else {
        return Opal.find_super_dispatcher(self, 'method_missing', TMP_1, null).apply(self, [m].concat(Opal.to_a(args)).concat(block.$to_proc()))
      };
    }), nil) && 'method_missing';
  })($scope.base, $scope.get('BasicObject'));
  (function($base, $super) {
    function $SimpleDelegator(){};
    var self = $SimpleDelegator = $klass($base, $super, 'SimpleDelegator', $SimpleDelegator);

    var def = self.$$proto, $scope = self.$$scope;

    def.delegate_sd_obj = nil;
    Opal.defn(self, '$__getobj__', function() {
      var self = this;

      return self.delegate_sd_obj;
    });

    return (Opal.defn(self, '$__setobj__', function(obj) {
      var self = this;

      return self.delegate_sd_obj = obj;
    }), nil) && '__setobj__';
  })($scope.base, $scope.get('Delegator'));
  return (Opal.defn(Opal.Object, '$DelegateClass', function(superklass) {
    var self = this;

    return $scope.get('SimpleDelegator');
  }), nil) && 'DelegateClass';
};

/* Generated by Opal 0.9.2 */
Opal.modules["attentive/phrase"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$join', '$to_s']);
  self.$require("delegate");
  return (function($base) {
    var $Attentive, self = $Attentive = $module($base, 'Attentive');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Phrase(){};
      var self = $Phrase = $klass($base, $super, 'Phrase', $Phrase);

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      Opal.defn(self, '$initialize', TMP_1 = function(tokens) {
        var self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

        TMP_1.$$p = null;
        return Opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [tokens]);
      });

      Opal.defn(self, '$to_s', function() {
        var self = this;

        return self.$join();
      });

      return (Opal.defn(self, '$inspect', function() {
        var self = this;

        return "\"" + (self.$to_s()) + "\"";
      }), nil) && 'inspect';
    })($scope.base, $scope.get('SimpleDelegator'))
  })($scope.base);
};

/* Generated by Opal 0.9.2 */
Opal.modules["attentive/errors"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  return (function($base) {
    var $Attentive, self = $Attentive = $module($base, 'Attentive');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $AmbiguousPhraseError(){};
      var self = $AmbiguousPhraseError = $klass($base, $super, 'AmbiguousPhraseError', $AmbiguousPhraseError);

      var def = self.$$proto, $scope = self.$$scope;

      return nil;
    })($scope.base, $scope.get('RuntimeError'));

    (function($base, $super) {
      function $UndefinedEntityError(){};
      var self = $UndefinedEntityError = $klass($base, $super, 'UndefinedEntityError', $UndefinedEntityError);

      var def = self.$$proto, $scope = self.$$scope;

      return nil;
    })($scope.base, $scope.get('RuntimeError'));
  })($scope.base)
};

/* Generated by Opal 0.9.2 */
Opal.modules["attentive/entity"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $hash = Opal.hash;

  Opal.add_stubs(['$require', '$attr_reader', '$attr_accessor', '$fetch', '$raise', '$new', '$inspect', '$token_name=', '$phrases=', '$map', '$tokenize', '$send', '$to_proc', '$register!', '$[]=', '$to_s', '$==', '$class', '$variable_name', '$token_name', '$each', '$dup', '$match!', '$instance_variable_set', '$pos', '$_value_from_match', '$phrases']);
  self.$require("attentive/tokenizer");
  self.$require("attentive/errors");
  return (function($base) {
    var $Attentive, self = $Attentive = $module($base, 'Attentive');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Entity(){};
      var self = $Entity = $klass($base, $super, 'Entity', $Entity);

      var def = self.$$proto, $scope = self.$$scope, TMP_3;

      self.$attr_reader("variable_name");

      self.entities = $hash2([], {});

      (function(self) {
        var $scope = self.$$scope, def = self.$$proto, TMP_1;

        self.$attr_accessor("phrases");
        self.$attr_accessor("token_name");
        Opal.defn(self, '$[]', function(entity_name) {
          var self = this;
          if (self.entities == null) self.entities = nil;

          try {
          return self.entities.$fetch(entity_name)
          } catch ($err) {if (Opal.rescue($err, [$scope.get('KeyError')])) {
            try {
              return self.$raise((($scope.get('Attentive')).$$scope.get('UndefinedEntityError')).$new("Undefined Entity " + (entity_name.$inspect())))
            } finally {
              Opal.gvars["!"] = Opal.exceptions.pop() || Opal.nil;
            }
            }else { throw $err; }
          };
        });
        Opal.defn(self, '$define', TMP_1 = function(entity_name) {
          var $a, $b, $c, $d, TMP_2, self = this, $iter = TMP_1.$$p, block = $iter || nil, entity_klass = nil, $splat_index = nil;

          var array_size = arguments.length - 1;
          if(array_size < 0) array_size = 0;
          var phrases = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            phrases[$splat_index] = arguments[$splat_index + 1];
          }
          TMP_1.$$p = null;
          entity_klass = $scope.get('Class').$new((($scope.get('Attentive')).$$scope.get('Entity')));
          (($a = [entity_name]), $b = entity_klass, $b['$token_name='].apply($b, $a), $a[$a.length-1]);
          (($a = [($c = ($d = phrases).$map, $c.$$p = (TMP_2 = function(phrase){var self = TMP_2.$$s || this;
if (phrase == null) phrase = nil;
          return (($scope.get('Attentive')).$$scope.get('Tokenizer')).$tokenize(phrase, $hash2(["entities", "regexps", "ambiguous"], {"entities": true, "regexps": true, "ambiguous": false}))}, TMP_2.$$s = self, TMP_2), $c).call($d)]), $b = entity_klass, $b['$phrases='].apply($b, $a), $a[$a.length-1]);
          ($a = ($b = entity_klass).$send, $a.$$p = block.$to_proc(), $a).call($b, "define_method", "_value_from_match");
          return self['$register!'](entity_name, entity_klass);
        });
        return (Opal.defn(self, '$register!', function(entity_name, entity_klass) {
          var self = this;
          if (self.entities == null) self.entities = nil;

          return self.entities['$[]='](entity_name, entity_klass);
        }), nil) && 'register!';
      })(Opal.get_singleton_class(self));

      Opal.defn(self, '$initialize', TMP_3 = function(variable_name, pos) {
        var self = this, $iter = TMP_3.$$p, $yield = $iter || nil;

        if (pos == null) {
          pos = 0
        }
        TMP_3.$$p = null;
        self.variable_name = variable_name.$to_s();
        return Opal.find_super_dispatcher(self, 'initialize', TMP_3, null).apply(self, [pos]);
      });

      Opal.defn(self, '$==', function(other) {
        var $a, self = this;

        return (($a = self.$class()['$=='](other.$class())) ? self.$variable_name()['$=='](other.$variable_name()) : self.$class()['$=='](other.$class()));
      });

      Opal.defn(self, '$to_s', function() {
        var self = this;

        return "{{" + (self.$variable_name()) + ":" + (self.$class().$token_name()) + "}}";
      });

      Opal.defn(self, '$entity?', function() {
        var self = this;

        return true;
      });

      return (Opal.defn(self, '$matches?', function(cursor) {try {

        var $a, $b, TMP_4, self = this;

        ($a = ($b = self.$class().$phrases()).$each, $a.$$p = (TMP_4 = function(phrase){var self = TMP_4.$$s || this, cursor_copy = nil, match = nil;
if (phrase == null) phrase = nil;
        cursor_copy = cursor.$dup();
          match = (($scope.get('Attentive')).$$scope.get('Matcher')).$new(phrase, cursor_copy)['$match!']();
          if (match !== false && match !== nil) {
            cursor.$instance_variable_set("@pos", cursor_copy.$pos());
            Opal.ret($hash(self.$variable_name(), self.$_value_from_match(match)));
            } else {
            return nil
          };}, TMP_4.$$s = self, TMP_4), $a).call($b);
        return false;
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      }), nil) && 'matches?';
    })($scope.base, $scope.get('Token'))
  })($scope.base);
};

/* Generated by Opal 0.9.2 */
Opal.modules["attentive/composite_entity"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$attr_reader', '$attr_accessor', '$new', '$token_name=', '$entities=', '$map', '$[]', '$register!', '$variable_name', '$entities', '$class', '$each', '$matches?', '$dup']);
  self.$require("attentive/entity");
  return (function($base) {
    var $Attentive, self = $Attentive = $module($base, 'Attentive');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $CompositeEntity(){};
      var self = $CompositeEntity = $klass($base, $super, 'CompositeEntity', $CompositeEntity);

      var def = self.$$proto, $scope = self.$$scope, TMP_2;

      self.$attr_reader("entities");

      self.entities = [];

      (function(self) {
        var $scope = self.$$scope, def = self.$$proto;

        self.$attr_accessor("entities");
        return (Opal.defn(self, '$define', function(entity_name) {
          var $a, $b, $c, $d, TMP_1, self = this, entity_klass = nil, $splat_index = nil;

          var array_size = arguments.length - 1;
          if(array_size < 0) array_size = 0;
          var entities = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            entities[$splat_index] = arguments[$splat_index + 1];
          }
          entity_klass = $scope.get('Class').$new((($scope.get('Attentive')).$$scope.get('CompositeEntity')));
          (($a = [entity_name]), $b = entity_klass, $b['$token_name='].apply($b, $a), $a[$a.length-1]);
          (($a = [($c = ($d = entities).$map, $c.$$p = (TMP_1 = function(entity){var self = TMP_1.$$s || this;
if (entity == null) entity = nil;
          return $scope.get('Entity')['$[]'](entity)}, TMP_1.$$s = self, TMP_1), $c).call($d)]), $b = entity_klass, $b['$entities='].apply($b, $a), $a[$a.length-1]);
          return $scope.get('Entity')['$register!'](entity_name, entity_klass);
        }), nil) && 'define';
      })(Opal.get_singleton_class(self));

      Opal.defn(self, '$initialize', TMP_2 = function() {
        var $a, $b, TMP_3, self = this, $iter = TMP_2.$$p, $yield = $iter || nil, $splat_index = nil, $zuper = nil, $zuper_index = nil;

        var array_size = arguments.length - 0;
        if(array_size < 0) array_size = 0;
        var args = new Array(array_size);
        for($splat_index = 0; $splat_index < array_size; $splat_index++) {
          args[$splat_index] = arguments[$splat_index + 0];
        }
        TMP_2.$$p = null;
        $zuper = [];
        for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
          $zuper[$zuper_index] = arguments[$zuper_index];
        }
        Opal.find_super_dispatcher(self, 'initialize', TMP_2, $iter).apply(self, $zuper);
        return self.entities = ($a = ($b = self.$class().$entities()).$map, $a.$$p = (TMP_3 = function(entity_klass){var self = TMP_3.$$s || this;
if (entity_klass == null) entity_klass = nil;
        return entity_klass.$new(self.$variable_name())}, TMP_3.$$s = self, TMP_3), $a).call($b);
      });

      return (Opal.defn(self, '$matches?', function(cursor) {try {

        var $a, $b, TMP_4, self = this;

        ($a = ($b = self.$entities()).$each, $a.$$p = (TMP_4 = function(entity){var self = TMP_4.$$s || this, match = nil;
if (entity == null) entity = nil;
        match = entity['$matches?'](cursor.$dup());
          if (match !== false && match !== nil) {
            Opal.ret(match)
            } else {
            return nil
          };}, TMP_4.$$s = self, TMP_4), $a).call($b);
        return false;
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      }), nil) && 'matches?';
    })($scope.base, $scope.get('Entity'))
  })($scope.base);
};

/* Generated by Opal 0.9.2 */
Opal.modules["attentive/entities/integer"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require', '$define', '$to_i', '$[]']);
  self.$require("attentive/entity");
  return ($a = ($b = (($scope.get('Attentive')).$$scope.get('Entity'))).$define, $a.$$p = (TMP_1 = function(match){var self = TMP_1.$$s || this;
if (match == null) match = nil;
  return match['$[]']("integer").$to_i()}, TMP_1.$$s = self, TMP_1), $a).call($b, "integer", "(?<integer>\\d+)");
};

/* Generated by Opal 0.9.2 */
Opal.modules["date"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$<=>', '$nonzero?', '$d', '$zero?', '$new', '$class', '$-@', '$+@', '$===', '$coerce', '$==', '$>', '$+', '$allocate', '$wrap', '$clone', '$raise', '$>>', '$wday', '$-', '$to_s', '$alias_method']);
  return (function($base, $super) {
    function $Date(){};
    var self = $Date = $klass($base, $super, 'Date', $Date);

    var def = self.$$proto, $scope = self.$$scope;

    def.date = nil;
    (function($base, $super) {
      function $Infinity(){};
      var self = $Infinity = $klass($base, $super, 'Infinity', $Infinity);

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      def.d = nil;
      self.$include($scope.get('Comparable'));

      Opal.defn(self, '$initialize', function(d) {
        var self = this;

        if (d == null) {
          d = 1
        }
        return self.d = d['$<=>'](0);
      });

      Opal.defn(self, '$d', function() {
        var self = this;

        return self.d;
      });

      Opal.defn(self, '$zero?', function() {
        var self = this;

        return false;
      });

      Opal.defn(self, '$finite?', function() {
        var self = this;

        return false;
      });

      Opal.defn(self, '$infinite?', function() {
        var self = this;

        return self.$d()['$nonzero?']();
      });

      Opal.defn(self, '$nan?', function() {
        var self = this;

        return self.$d()['$zero?']();
      });

      Opal.defn(self, '$abs', function() {
        var self = this;

        return self.$class().$new();
      });

      Opal.defn(self, '$-@', function() {
        var self = this;

        return self.$class().$new(self.$d()['$-@']());
      });

      Opal.defn(self, '$+@', function() {
        var self = this;

        return self.$class().$new(self.$d()['$+@']());
      });

      Opal.defn(self, '$<=>', function(other) {
        var $a, $b, self = this, $case = nil, l = nil, r = nil;

        $case = other;if ($scope.get('Infinity')['$===']($case)) {return self.$d()['$<=>'](other.$d())}else if ($scope.get('Numeric')['$===']($case)) {return self.$d()}else {try {
        $b = other.$coerce(self), $a = Opal.to_ary($b), l = ($a[0] == null ? nil : $a[0]), r = ($a[1] == null ? nil : $a[1]), $b;
          return l['$<=>'](r);
        } catch ($err) {if (Opal.rescue($err, [$scope.get('NoMethodError')])) {
          try {
            nil
          } finally {
            Opal.gvars["!"] = Opal.exceptions.pop() || Opal.nil;
          }
          }else { throw $err; }
        }};
        return nil;
      });

      Opal.defn(self, '$coerce', TMP_1 = function(other) {
        var self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $case = nil, $zuper = nil, $zuper_index = nil;

        TMP_1.$$p = null;
        $zuper = [];
        for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
          $zuper[$zuper_index] = arguments[$zuper_index];
        }
        return (function() {$case = other;if ($scope.get('Numeric')['$===']($case)) {return [self.$d()['$-@'](), self.$d()]}else {return Opal.find_super_dispatcher(self, 'coerce', TMP_1, $iter).apply(self, $zuper)}})();
      });

      return (Opal.defn(self, '$to_f', function() {
        var $a, self = this;

        if (self.d['$=='](0)) {
          return 0};
        if ((($a = $rb_gt(self.d, 0)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return (($scope.get('Float')).$$scope.get('INFINITY'))
          } else {
          return (($scope.get('Float')).$$scope.get('INFINITY'))['$-@']()
        };
      }), nil) && 'to_f';
    })($scope.base, $scope.get('Numeric'));

    Opal.cdecl($scope, 'JULIAN', $scope.get('Infinity').$new());

    Opal.cdecl($scope, 'GREGORIAN', $scope.get('Infinity').$new()['$-@']());

    Opal.cdecl($scope, 'ITALY', 2299161);

    Opal.cdecl($scope, 'ENGLAND', 2361222);

    Opal.cdecl($scope, 'MONTHNAMES', $rb_plus([nil], ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]));

    Opal.cdecl($scope, 'DAYNAMES', ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);

    Opal.cdecl($scope, 'ABBR_DAYNAMES', ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]);

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto;

      Opal.alias(self, 'civil', 'new');
      Opal.defn(self, '$wrap', function(native$) {
        var self = this, instance = nil;

        instance = self.$allocate();
        instance.date = native$;
        return instance;
      });
      Opal.defn(self, '$parse', function(string) {
        var self = this, match = nil;

        match = /^(\d*)-(\d*)-(\d*)/.exec(string);
        return self.$wrap(new Date(parseInt(match[1], 10), parseInt(match[2], 10) - 1, parseInt(match[3], 10)));
      });
      return (Opal.defn(self, '$today', function() {
        var self = this;

        return self.$wrap(new Date());
      }), nil) && 'today';
    })(Opal.get_singleton_class(self));

    Opal.defn(self, '$initialize', function(year, month, day, start) {
      var self = this;

      if (year == null) {
        year = -4712
      }
      if (month == null) {
        month = 1
      }
      if (day == null) {
        day = 1
      }
      if (start == null) {
        start = $scope.get('ITALY')
      }
      return self.date = new Date(year, month - 1, day);
    });

    Opal.defn(self, '$-', function(date) {
      var self = this;

      
      if (date.$$is_number) {
        var result = self.$clone();
        result.date.setDate(self.date.getDate() - date);
        return result;
      }
      else if (date.date) {
        return Math.round((self.date - date.date) / (1000 * 60 * 60 * 24));
      }
      else {
        self.$raise($scope.get('TypeError'));
      }
    ;
    });

    Opal.defn(self, '$+', function(date) {
      var self = this;

      
      if (date.$$is_number) {
        var result = self.$clone();
        result.date.setDate(self.date.getDate() + date);
        return result;
      }
      else {
        self.$raise($scope.get('TypeError'));
      }
    ;
    });

    Opal.defn(self, '$<', function(other) {
      var self = this;

      
      var a = self.date, b = other.date;
      a.setHours(0, 0, 0, 0);
      b.setHours(0, 0, 0, 0);
      return a < b;
    ;
    });

    Opal.defn(self, '$<=', function(other) {
      var self = this;

      
      var a = self.date, b = other.date;
      a.setHours(0, 0, 0, 0);
      b.setHours(0, 0, 0, 0);
      return a <= b;
    ;
    });

    Opal.defn(self, '$>', function(other) {
      var self = this;

      
      var a = self.date, b = other.date;
      a.setHours(0, 0, 0, 0);
      b.setHours(0, 0, 0, 0);
      return a > b;
    ;
    });

    Opal.defn(self, '$>=', function(other) {
      var self = this;

      
      var a = self.date, b = other.date;
      a.setHours(0, 0, 0, 0);
      b.setHours(0, 0, 0, 0);
      return a >= b;
    ;
    });

    Opal.defn(self, '$<=>', function(other) {
      var self = this;

      
      var a = self.date, b = other.date;
      a.setHours(0, 0, 0, 0);
      b.setHours(0, 0, 0, 0);

      if (a < b) {
        return -1;
      }
      else if (a > b) {
        return 1;
      }
      else {
        return 0;
      }
    ;
    });

    Opal.defn(self, '$==', function(other) {
      var self = this;

      
      var a = self.date, b = other.date;
      return (a.getFullYear() === b.getFullYear() && a.getMonth() === b.getMonth() && a.getDate() === b.getDate());
    ;
    });

    Opal.defn(self, '$>>', function(n) {
      var self = this;

      
      if (!n.$$is_number) {
        self.$raise($scope.get('TypeError'));
      }

      var result = self.$clone(), date = result.date, cur = date.getDate();
      date.setDate(1);
      date.setMonth(date.getMonth() + n);
      date.setDate(Math.min(cur, days_in_month(date.getFullYear(), date.getMonth())));
      return result;
    ;
    });

    Opal.defn(self, '$<<', function(n) {
      var self = this;

      
      if (!n.$$is_number) {
        self.$raise($scope.get('TypeError'));
      }

      return self['$>>'](-n);
    ;
    });

    Opal.alias(self, 'eql?', '==');

    Opal.defn(self, '$clone', function() {
      var self = this;

      return $scope.get('Date').$wrap(new Date(self.date.getTime()));
    });

    Opal.defn(self, '$day', function() {
      var self = this;

      return self.date.getDate();
    });

    Opal.defn(self, '$friday?', function() {
      var self = this;

      return self.$wday()['$=='](5);
    });

    Opal.defn(self, '$jd', function() {
      var self = this;

      
    //Adapted from http://www.physics.sfasu.edu/astro/javascript/julianday.html

    var mm = self.date.getMonth() + 1,
        dd = self.date.getDate(),
        yy = self.date.getFullYear(),
        hr = 12, mn = 0, sc = 0,
        ggg, s, a, j1, jd;

    hr = hr + (mn / 60) + (sc/3600);

    ggg = 1;
    if (yy <= 1585) {
      ggg = 0;
    }

    jd = -1 * Math.floor(7 * (Math.floor((mm + 9) / 12) + yy) / 4);

    s = 1;
    if ((mm - 9) < 0) {
      s =- 1;
    }

    a = Math.abs(mm - 9);
    j1 = Math.floor(yy + s * Math.floor(a / 7));
    j1 = -1 * Math.floor((Math.floor(j1 / 100) + 1) * 3 / 4);

    jd = jd + Math.floor(275 * mm / 9) + dd + (ggg * j1);
    jd = jd + 1721027 + 2 * ggg + 367 * yy - 0.5;
    jd = jd + (hr / 24);

    return jd;
    ;
    });

    Opal.defn(self, '$julian?', function() {
      var self = this;

      return self.date < new Date(1582, 10 - 1, 15, 12);
    });

    Opal.defn(self, '$monday?', function() {
      var self = this;

      return self.$wday()['$=='](1);
    });

    Opal.defn(self, '$month', function() {
      var self = this;

      return self.date.getMonth() + 1;
    });

    Opal.defn(self, '$next', function() {
      var self = this;

      return $rb_plus(self, 1);
    });

    Opal.defn(self, '$next_day', function(n) {
      var self = this;

      if (n == null) {
        n = 1
      }
      return $rb_plus(self, n);
    });

    Opal.defn(self, '$next_month', function() {
      var self = this;

      
      var result = self.$clone(), date = result.date, cur = date.getDate();
      date.setDate(1);
      date.setMonth(date.getMonth() + 1);
      date.setDate(Math.min(cur, days_in_month(date.getFullYear(), date.getMonth())));
      return result;
    ;
    });

    Opal.defn(self, '$prev_day', function(n) {
      var self = this;

      if (n == null) {
        n = 1
      }
      return $rb_minus(self, n);
    });

    Opal.defn(self, '$prev_month', function() {
      var self = this;

      
      var result = self.$clone(), date = result.date, cur = date.getDate();
      date.setDate(1);
      date.setMonth(date.getMonth() - 1);
      date.setDate(Math.min(cur, days_in_month(date.getFullYear(), date.getMonth())));
      return result;
    ;
    });

    Opal.defn(self, '$saturday?', function() {
      var self = this;

      return self.$wday()['$=='](6);
    });

    Opal.defn(self, '$strftime', function(format) {
      var self = this;

      if (format == null) {
        format = ""
      }
      
      if (format == '') {
        return self.$to_s();
      }

      return self.date.$strftime(format);
    ;
    });

    self.$alias_method("succ", "next");

    Opal.defn(self, '$sunday?', function() {
      var self = this;

      return self.$wday()['$=='](0);
    });

    Opal.defn(self, '$thursday?', function() {
      var self = this;

      return self.$wday()['$=='](4);
    });

    Opal.defn(self, '$to_s', function() {
      var self = this;

      
      var d = self.date, year = d.getFullYear(), month = d.getMonth() + 1, day = d.getDate();
      if (month < 10) { month = '0' + month; }
      if (day < 10) { day = '0' + day; }
      return year + '-' + month + '-' + day;
    ;
    });

    Opal.defn(self, '$tuesday?', function() {
      var self = this;

      return self.$wday()['$=='](2);
    });

    Opal.defn(self, '$wday', function() {
      var self = this;

      return self.date.getDay();
    });

    Opal.defn(self, '$wednesday?', function() {
      var self = this;

      return self.$wday()['$=='](3);
    });

    Opal.defn(self, '$year', function() {
      var self = this;

      return self.date.getFullYear();
    });

    
    function days_in_month(year, month) {
      var leap = ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0);
      return [31, (leap ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month]
    }
  
  })($scope.base, null)
};

/* Generated by Opal 0.9.2 */
Opal.modules["attentive/entities/relative_date"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, weekday_regexp = nil;

  Opal.add_stubs(['$require', '$define', '$today', '$lambda', '$-', '$wday', '$<', '$+', '$matched?', '$[]', '$===', '$raise', '$inspect', '$start_with?', '$to_s']);
  self.$require("attentive/entity");
  self.$require("date");
  weekday_regexp = "(?<weekday>sunday|monday|tuesday|wednesday|thursday|friday|saturday)";
  return ($a = ($b = (($scope.get('Attentive')).$$scope.get('Entity'))).$define, $a.$$p = (TMP_1 = function(match){var self = TMP_1.$$s || this, $a, $b, TMP_2, today = nil, next_wday = nil, date = nil, $case = nil, weekday = nil;
if (match == null) match = nil;
  today = $scope.get('Date').$today();
    next_wday = ($a = ($b = self).$lambda, $a.$$p = (TMP_2 = function(wday){var self = TMP_2.$$s || this, $a, days_until_wday = nil;
if (wday == null) wday = nil;
    days_until_wday = $rb_minus(wday, today.$wday());
      if ((($a = $rb_lt(days_until_wday, 0)) !== nil && (!$a.$$is_boolean || $a == true))) {
        days_until_wday = $rb_plus(days_until_wday, 7)};
      return $rb_plus(today, days_until_wday);}, TMP_2.$$s = self, TMP_2), $a).call($b);
    if ((($a = match['$matched?']("weekday")) !== nil && (!$a.$$is_boolean || $a == true))) {
      date = (function() {$case = weekday = match['$[]']("weekday");if (/^sun/['$===']($case)) {return next_wday['$[]'](0)}else if (/^mon/['$===']($case)) {return next_wday['$[]'](1)}else if (/^tue/['$===']($case)) {return next_wday['$[]'](2)}else if (/^wed/['$===']($case)) {return next_wday['$[]'](3)}else if (/^thu/['$===']($case)) {return next_wday['$[]'](4)}else if (/^fri/['$===']($case)) {return next_wday['$[]'](5)}else if (/^sat/['$===']($case)) {return next_wday['$[]'](6)}else {return self.$raise($scope.get('NotImplementedError'), "Unrecognized weekday: " + (weekday.$inspect()))}})();
      if ((($a = match.$to_s()['$start_with?']("next")) !== nil && (!$a.$$is_boolean || $a == true))) {
        date = $rb_plus(date, 7)};
      if ((($a = match.$to_s()['$start_with?']("last")) !== nil && (!$a.$$is_boolean || $a == true))) {
        date = $rb_minus(date, 7)};
      return date;
      } else {
      return (function() {$case = match.$to_s();if ("today"['$===']($case)) {return today}else if ("tomorrow"['$===']($case)) {return $rb_plus(today, 1)}else if ("yesterday"['$===']($case)) {return $rb_minus(today, 1)}else {return self.$raise($scope.get('NotImplementedError'), "Unrecognized match: " + (match.$to_s()))}})()
    };}, TMP_1.$$s = self, TMP_1), $a).call($b, "relative-date", "today", "tomorrow", "yesterday", weekday_regexp, "next " + (weekday_regexp), "last " + (weekday_regexp));
};

/* Generated by Opal 0.9.2 */
Opal.modules["attentive/tokenizer"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$require', '$extend', '$freeze', '$reject', '$to_proc', '$split', '$normalize', '$fetch', '$!', '$<', '$length', '$[]', '$===', '$<<', '$whitespace', '$==', '$+', '$emoji', '$punctuation', '$entity', '$reverse', '$join', '$!=', '$-', '$regexp', '$invocations', '$invocation', '$concat', '$tokenize', '$map', '$any_of', '$word', '$fail_if_ambiguous!', '$new', '$find', '$raise', '$inspect', '$possibilities']);
  self.$require("attentive/abbreviations");
  self.$require("attentive/contractions");
  self.$require("attentive/text");
  self.$require("attentive/tokens");
  self.$require("attentive/phrase");
  self.$require("attentive/errors");
  (function($base) {
    var $Attentive, self = $Attentive = $module($base, 'Attentive');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Tokenizer(){};
      var self = $Tokenizer = $klass($base, $super, 'Tokenizer', $Tokenizer);

      var def = self.$$proto, $scope = self.$$scope;

      self.$extend((($scope.get('Attentive')).$$scope.get('Tokens')));

      Opal.cdecl($scope, 'SPLITTER', /(\n|{{|}}|\s+|\.{2,}|[^\s\w'@-])/.$freeze());

      Opal.cdecl($scope, 'PUNCTUATION', /^\W+$/.$freeze());

      Opal.cdecl($scope, 'WHITESPACE', /^\s+$/.$freeze());

      Opal.cdecl($scope, 'ENTITY_START', "{{".$freeze());

      Opal.cdecl($scope, 'ENTITY_END', "}}".$freeze());

      Opal.cdecl($scope, 'REGEXP_START', "(".$freeze());

      Opal.cdecl($scope, 'REGEXP_END', ")".$freeze());

      Opal.cdecl($scope, 'REGEXP_ESCAPE', "\\".$freeze());

      Opal.defs(self, '$split', function(message) {
        var $a, $b, self = this;

        return ($a = ($b = (($scope.get('Attentive')).$$scope.get('Text')).$normalize(message).$split($scope.get('SPLITTER'))).$reject, $a.$$p = "empty?".$to_proc(), $a).call($b);
      });

      Opal.defs(self, '$tokenize', function(message, options) {
        var $a, $b, $c, $d, $e, TMP_1, self = this, match_entities = nil, match_regexps = nil, fail_if_ambiguous = nil, strings = nil, tokens = nil, i = nil, pos = nil, string = nil, $case = nil, j = nil, found_entity = nil, entity = nil, found_regexp = nil, parens = nil, inside_square_bracket = nil, replace_with = nil, expands_to = nil, possibilities = nil;

        if (options == null) {
          options = $hash2([], {})
        }
        match_entities = options.$fetch("entities", false);
        match_regexps = options.$fetch("regexps", false);
        fail_if_ambiguous = options.$fetch("ambiguous", true)['$!']();
        strings = self.$split(message);
        tokens = [];
        i = 0;
        pos = 0;
        while ((($b = $rb_lt(i, strings.$length())) !== nil && (!$b.$$is_boolean || $b == true))) {
        string = strings['$[]'](i);
        $case = string;if (""['$===']($case)) {nil}else if ($scope.get('WHITESPACE')['$===']($case)) {tokens['$<<'](self.$whitespace(string, $hash2(["pos"], {"pos": pos})))}else if (":"['$===']($case)) {if (strings['$[]']($rb_plus(i, 2))['$=='](":")) {
          tokens['$<<'](self.$emoji(strings['$[]']($rb_plus(i, 1)), $hash2(["pos"], {"pos": pos})));
          pos = $rb_plus(pos, $rb_plus(strings['$[]']($rb_plus(i, 1)).$length(), 1));
          i = $rb_plus(i, 2);
          } else {
          tokens['$<<'](self.$punctuation(":", $hash2(["pos"], {"pos": pos})))
        }}else if ($scope.get('ENTITY_START')['$===']($case)) {if (match_entities !== false && match_entities !== nil) {
          j = $rb_plus(i, 1);
          found_entity = false;
          while ((($c = $rb_lt(j, strings.$length())) !== nil && (!$c.$$is_boolean || $c == true))) {
          if (strings['$[]'](j)['$==']($scope.get('ENTITY_END'))) {
            entity = strings['$[]']($range(($rb_plus(i, 1)), j, true));
            tokens['$<<'](($c = self).$entity.apply($c, Opal.to_a(entity.$join().$split(":").$reverse()).concat($hash2(["pos"], {"pos": pos}))));
            i = $rb_plus(j, 1);
            pos = $rb_plus(pos, $rb_plus(entity.$join().$length(), 4));
            found_entity = true;
            break;;};
          j = $rb_plus(j, 1);};
          if (found_entity !== false && found_entity !== nil) {
            continue;};};
        tokens['$<<'](self.$punctuation($scope.get('ENTITY_START'), $hash2(["pos"], {"pos": pos})));}else if ($scope.get('REGEXP_START')['$===']($case)) {if ((($b = (($d = match_regexps !== false && match_regexps !== nil) ? strings['$[]']($rb_plus(i, 1))['$==']("?") : match_regexps)) !== nil && (!$b.$$is_boolean || $b == true))) {
          j = $rb_plus(i, 2);
          found_regexp = false;
          parens = 1;
          inside_square_bracket = false;
          while ((($d = $rb_lt(j, strings.$length())) !== nil && (!$d.$$is_boolean || $d == true))) {
          if ((($d = (($e = strings['$[]'](j)['$==']("[")) ? strings['$[]']($rb_minus(j, 1))['$!=']($scope.get('REGEXP_ESCAPE')) : strings['$[]'](j)['$==']("["))) !== nil && (!$d.$$is_boolean || $d == true))) {
            inside_square_bracket = true
          } else if ((($d = (($e = strings['$[]'](j)['$==']("]")) ? strings['$[]']($rb_minus(j, 1))['$!=']($scope.get('REGEXP_ESCAPE')) : strings['$[]'](j)['$==']("]"))) !== nil && (!$d.$$is_boolean || $d == true))) {
            inside_square_bracket = false};
          if (inside_square_bracket !== false && inside_square_bracket !== nil) {
            } else {
            if ((($d = (($e = strings['$[]'](j)['$==']($scope.get('REGEXP_START'))) ? strings['$[]']($rb_minus(j, 1))['$!=']($scope.get('REGEXP_ESCAPE')) : strings['$[]'](j)['$==']($scope.get('REGEXP_START')))) !== nil && (!$d.$$is_boolean || $d == true))) {
              parens = $rb_plus(parens, 1)
            } else if ((($d = (($e = strings['$[]'](j)['$==']($scope.get('REGEXP_END'))) ? strings['$[]']($rb_minus(j, 1))['$!=']($scope.get('REGEXP_ESCAPE')) : strings['$[]'](j)['$==']($scope.get('REGEXP_END')))) !== nil && (!$d.$$is_boolean || $d == true))) {
              parens = $rb_minus(parens, 1)};
            if (parens['$=='](0)) {
              tokens['$<<'](self.$regexp(strings['$[]']($range(i, j, false)).$join(), $hash2(["pos"], {"pos": pos})));
              pos = $rb_plus(pos, $rb_plus(strings['$[]']($range(i, j, false)).$join().$length(), 2));
              i = $rb_plus(j, 1);
              found_regexp = true;
              break;;};
          };
          j = $rb_plus(j, 1);};
          if (found_regexp !== false && found_regexp !== nil) {
            continue;};};
        tokens['$<<'](self.$punctuation($scope.get('REGEXP_START'), $hash2(["pos"], {"pos": pos})));}else if ($scope.get('PUNCTUATION')['$===']($case)) {tokens['$<<'](self.$punctuation(string, $hash2(["pos"], {"pos": pos})))}else if ((function($splt) { for (var i = 0; i < $splt.length; i++) {if ($splt[i]['$===']($case)) { return true; }} return false; })($scope.get('Attentive').$invocations())) {tokens['$<<'](self.$invocation(string, $hash2(["pos"], {"pos": pos})))}else {if ((($b = replace_with = (($scope.get('Attentive')).$$scope.get('ABBREVIATIONS'))['$[]'](string)) !== nil && (!$b.$$is_boolean || $b == true))) {
          tokens.$concat(self.$tokenize(replace_with, options))
        } else if ((($b = expands_to = (($scope.get('Attentive')).$$scope.get('CONTRACTIONS'))['$[]'](string)) !== nil && (!$b.$$is_boolean || $b == true))) {
          possibilities = ($b = ($d = expands_to).$map, $b.$$p = (TMP_1 = function(possibility){var self = TMP_1.$$s || this;
if (possibility == null) possibility = nil;
          return self.$tokenize(possibility, options)}, TMP_1.$$s = self, TMP_1), $b).call($d);
          if (possibilities.$length()['$=='](1)) {
            tokens.$concat(possibilities['$[]'](0))
            } else {
            tokens['$<<'](self.$any_of(possibilities, $hash2(["pos"], {"pos": pos})))
          };
          } else {
          tokens['$<<'](self.$word(string, $hash2(["pos"], {"pos": pos})))
        }};
        i = $rb_plus(i, 1);
        pos = $rb_plus(pos, string.$length());};
        if (fail_if_ambiguous !== false && fail_if_ambiguous !== nil) {
          self['$fail_if_ambiguous!'](message, tokens)};
        return (($scope.get('Attentive')).$$scope.get('Phrase')).$new(tokens);
      });

      return (Opal.defs(self, '$fail_if_ambiguous!', function(phrase, tokens) {
        var $a, $b, $c, self = this, ambiguous_token = nil;

        ambiguous_token = ($a = ($b = tokens).$find, $a.$$p = "ambiguous?".$to_proc(), $a).call($b);
        if (ambiguous_token !== false && ambiguous_token !== nil) {
          } else {
          return nil
        };
        return self.$raise((($scope.get('Attentive')).$$scope.get('AmbiguousPhraseError')).$new(((("The phrase ") + (phrase.$inspect())) + " is ambiguous. ")['$<<']("Please use " + (($a = ($c = ambiguous_token.$possibilities()).$map, $a.$$p = "inspect".$to_proc(), $a).call($c).$join(" or ")))));
      }), nil) && 'fail_if_ambiguous!';
    })($scope.base, null)
  })($scope.base);
  self.$require("attentive/entity");
  self.$require("attentive/composite_entity");
  self.$require("attentive/entities/integer");
  return self.$require("attentive/entities/relative_date");
};

/* Generated by Opal 0.9.2 */
Opal.modules["attentive/message"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$attr_reader', '$new', '$fetch', '$any?', '$grep', '$tokens', '$<<', '$contexts', '$tokenize', '$text', '$inspect']);
  self.$require("set");
  self.$require("attentive/tokenizer");
  return (function($base) {
    var $Attentive, self = $Attentive = $module($base, 'Attentive');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Message(){};
      var self = $Message = $klass($base, $super, 'Message', $Message);

      var def = self.$$proto, $scope = self.$$scope;

      def.tokens = nil;
      self.$attr_reader("contexts", "text");

      Opal.defn(self, '$initialize', function(text, params) {
        var $a, self = this;

        if (params == null) {
          params = $hash2([], {})
        }
        self.text = text;
        self.contexts = $scope.get('Set').$new(params.$fetch("contexts", []));
        if ((($a = self.$tokens().$grep((((($scope.get('Attentive')).$$scope.get('Tokens'))).$$scope.get('Invocation')))['$any?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.$contexts()['$<<']("conversation")
          } else {
          return nil
        };
      });

      Opal.defn(self, '$tokens', function() {
        var $a, self = this;

        return ((($a = self.tokens) !== false && $a !== nil) ? $a : self.tokens = (($scope.get('Attentive')).$$scope.get('Tokenizer')).$tokenize(self.$text()));
      });

      Opal.alias(self, 'to_s', 'text');

      return (Opal.defn(self, '$inspect', function() {
        var self = this;

        return self.$tokens().$inspect();
      }), nil) && 'inspect';
    })($scope.base, null)
  })($scope.base);
};

/* Generated by Opal 0.9.2 */
Opal.modules["attentive"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$extend', '$invocations=', '$freeze', '$new', '$listen_for', '$to_proc', '$listeners', '$is_a?', '$hear']);
  self.$require("attentive/version");
  self.$require("attentive/config");
  (function($base) {
    var $Attentive, self = $Attentive = $module($base, 'Attentive');

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

    self.$extend((($scope.get('Attentive')).$$scope.get('Config')));

    (($a = [["@me".$freeze()]]), $b = self, $b['$invocations='].apply($b, $a), $a[$a.length-1]);

    Opal.defn(self, '$listeners', function() {
      var $a, self = this;
      if (self.listeners == null) self.listeners = nil;

      return ((($a = self.listeners) !== false && $a !== nil) ? $a : self.listeners = (($scope.get('Attentive')).$$scope.get('ListenerCollection')).$new());
    });

    Opal.defn(self, '$listen_for', TMP_1 = function() {
      var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 0];
      }
      TMP_1.$$p = null;
      return ($a = ($b = self.$listeners()).$listen_for, $a.$$p = block.$to_proc(), $a).apply($b, Opal.to_a(args));
    });

    Opal.defn(self, '$hear', function(message, params) {
      var $a, self = this;

      if (params == null) {
        params = $hash2([], {})
      }
      if ((($a = message['$is_a?']((($scope.get('Attentive')).$$scope.get('Message')))) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        message = (($scope.get('Attentive')).$$scope.get('Message')).$new(message, params)
      };
      return self.$listeners().$hear(message);
    });
  })($scope.base);
  self.$require("attentive/listener_collection");
  return self.$require("attentive/message");
};

/* Generated by Opal 0.9.2 */
Opal.modules["attentive/cursor"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$attr_reader', '$[]', '$tokens', '$pos', '$+', '$-', '$join', '$peek']);
  return (function($base) {
    var $Attentive, self = $Attentive = $module($base, 'Attentive');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Cursor(){};
      var self = $Cursor = $klass($base, $super, 'Cursor', $Cursor);

      var def = self.$$proto, $scope = self.$$scope;

      def.pos = nil;
      self.$attr_reader("tokens", "pos");

      Opal.defn(self, '$initialize', function(tokens, pos) {
        var self = this;

        if (pos == null) {
          pos = 0
        }
        self.tokens = tokens;
        return self.pos = pos;
      });

      Opal.defn(self, '$peek', function() {
        var self = this;

        return self.$tokens()['$[]'](self.$pos());
      });

      Opal.defn(self, '$pop', function() {
        var self = this;

        self.pos = $rb_plus(self.pos, 1);
        return self.$tokens()['$[]']($rb_minus(self.$pos(), 1));
      });

      Opal.defn(self, '$to_s', function() {
        var self = this;

        return self.$tokens()['$[]']($range(self.$pos(), -1, false)).$join();
      });

      return (Opal.defn(self, '$offset', function() {
        var self = this;

        return self.$peek().$pos();
      }), nil) && 'offset';
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.9.2 */
Opal.modules["attentive/listener"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$attr_reader', '$fetch', '$==', '$[]', '$tokenize_phrases!', '$superset?', '$contexts', '$disjoint?', '$delete', '$listeners', '$call', '$private', '$map', '$tokenize_phrase!', '$tokenize']);
  self.$require("attentive/text");
  self.$require("attentive/tokenizer");
  self.$require("set");
  return (function($base) {
    var $Attentive, self = $Attentive = $module($base, 'Attentive');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Listener(){};
      var self = $Listener = $klass($base, $super, 'Listener', $Listener);

      var def = self.$$proto, $scope = self.$$scope;

      def.required_contexts = def.prohibited_contexts = def.callback = nil;
      self.$attr_reader("phrases");

      Opal.defn(self, '$initialize', function(listeners, phrases, options, callback) {
        var $a, $b, self = this, context_options = nil;

        context_options = options.$fetch("context", $hash2([], {}));
        self.required_contexts = context_options.$fetch("in", ["conversation"]);
        if (self.required_contexts['$==']("any")) {
          self.required_contexts = []};
        self.required_contexts = ($a = $scope.get('Set'))['$[]'].apply($a, Opal.to_a(self.required_contexts));
        self.prohibited_contexts = context_options.$fetch("not_in", ["quotation"]);
        self.prohibited_contexts = ($b = $scope.get('Set'))['$[]'].apply($b, Opal.to_a(self.prohibited_contexts));
        self.listeners = listeners;
        self.phrases = self['$tokenize_phrases!'](phrases);
        return self.callback = callback;
      });

      Opal.defn(self, '$matches_context?', function(message) {
        var $a, self = this;

        if ((($a = message.$contexts()['$superset?'](self.required_contexts)) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          return false
        };
        if ((($a = message.$contexts()['$disjoint?'](self.prohibited_contexts)) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          return false
        };
        return true;
      });

      Opal.defn(self, '$stop_listening!', function() {
        var self = this;

        self.$listeners().$delete(self);
        return self;
      });

      Opal.defn(self, '$call', function(e) {
        var self = this;

        return self.callback.$call(e);
      });

      self.$private();

      self.$attr_reader("listeners");

      Opal.defn(self, '$tokenize_phrases!', function(phrases) {
        var $a, $b, TMP_1, self = this;

        return ($a = ($b = phrases).$map, $a.$$p = (TMP_1 = function(phrase){var self = TMP_1.$$s || this;
if (phrase == null) phrase = nil;
        return self['$tokenize_phrase!'](phrase)}, TMP_1.$$s = self, TMP_1), $a).call($b);
      });

      return (Opal.defn(self, '$tokenize_phrase!', function(phrase) {
        var self = this;

        return (($scope.get('Attentive')).$$scope.get('Tokenizer')).$tokenize(phrase, $hash2(["entities", "regexps", "ambiguous"], {"entities": true, "regexps": true, "ambiguous": false}));
      }), nil) && 'tokenize_phrase!';
    })($scope.base, null)
  })($scope.base);
};

/* Generated by Opal 0.9.2 */
Opal.modules["attentive/match"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_reader', '$to_s', '$fetch', '$[]', '$key?']);
  return (function($base) {
    var $Attentive, self = $Attentive = $module($base, 'Attentive');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Match(){};
      var self = $Match = $klass($base, $super, 'Match', $Match);

      var def = self.$$proto, $scope = self.$$scope;

      def.match_data = def.phrase = nil;
      self.$attr_reader("listener", "phrase", "message");

      Opal.defn(self, '$initialize', function(phrase, attributes) {
        var self = this;

        if (attributes == null) {
          attributes = $hash2([], {})
        }
        self.phrase = phrase.$to_s();
        self.match_data = attributes.$fetch("match_data", $hash2([], {}));
        self.listener = attributes['$[]']("listener");
        return self.message = attributes['$[]']("message");
      });

      Opal.defn(self, '$matched?', function(variable_name) {
        var self = this;

        return self.match_data['$key?'](variable_name.$to_s());
      });

      Opal.defn(self, '$[]', function(variable_name) {
        var self = this;

        return self.match_data.$fetch(variable_name.$to_s());
      });

      return (Opal.defn(self, '$to_s', function() {
        var self = this;

        return self.phrase;
      }), nil) && 'to_s';
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.9.2 */
Opal.modules["attentive/matcher"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$attr_reader', '$fetch', '$each_with_object', '$member?', '$[]=', '$[]', '$pos', '$whitespace?', '$+', '$==', '$peek', '$cursor', '$ambiguous?', '$match_subphrase!', '$possibilities', '$phrase', '$matches?', '$is_a?', '$offset', '$length', '$to_s', '$merge!', '$zip', '$names', '$captures', '$index', '$>=', '$tokens', '$instance_variable_set', '$new', '$merge', '$!', '$skippable?', '$pop', '$each', '$match!', '$mismatch?']);
  self.$require("attentive/match");
  return (function($base) {
    var $Attentive, self = $Attentive = $module($base, 'Attentive');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Matcher(){};
      var self = $Matcher = $klass($base, $super, 'Matcher', $Matcher);

      var def = self.$$proto, $scope = self.$$scope;

      def.pos = def.state = def.match_data = def.match_params = nil;
      self.$attr_reader("phrase", "cursor", "pos");

      Opal.defn(self, '$initialize', function(phrase, cursor, params) {
        var $a, $b, TMP_1, $d, $e, self = this;

        if (params == null) {
          params = $hash2([], {})
        }
        self.phrase = phrase;
        self.cursor = cursor;
        self.pos = params.$fetch("pos", 0);
        self.match_params = ($a = ($b = params).$each_with_object, $a.$$p = (TMP_1 = function($c, new_hash){var self = TMP_1.$$s || this, $a;
var key = $c[0], value = $c[1];if (new_hash == null) new_hash = nil;
        if ((($a = ["listener", "message"]['$member?'](key)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return new_hash['$[]='](key, value)
            } else {
            return nil
          }}, TMP_1.$$s = self, TMP_1), $a).call($b, $hash2([], {}));
        while ((($d = ($e = phrase['$[]'](self.$pos()), $e !== false && $e !== nil ?phrase['$[]'](self.$pos())['$whitespace?']() : $e)) !== nil && (!$d.$$is_boolean || $d == true))) {
        self.pos = $rb_plus(self.pos, 1)};
        self.match_data = $hash2([], {});
        return self.state = "matching";
      });

      Opal.defn(self, '$matching?', function() {
        var self = this;

        return self.state['$==']("matching");
      });

      Opal.defn(self, '$mismatch?', function() {
        var self = this;

        return self.state['$==']("mismatch");
      });

      Opal.defn(self, '$match!', function() {
        var $a, $b, $c, $d, TMP_2, $e, self = this, token = nil, match_data = nil, new_character_index = nil, cursor_pos = nil;

        while ((($b = token = self.$cursor().$peek()) !== nil && (!$b.$$is_boolean || $b == true))) {
        if ((($b = token['$ambiguous?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
          if ((($b = self['$match_subphrase!'](token.$possibilities())) !== nil && (!$b.$$is_boolean || $b == true))) {
            } else {
            self.state = "mismatch";
            break;;
          };
          while ((($c = ($d = self.$phrase()['$[]'](self.$pos()), $d !== false && $d !== nil ?self.$phrase()['$[]'](self.$pos())['$whitespace?']() : $d)) !== nil && (!$c.$$is_boolean || $c == true))) {
          self.pos = $rb_plus(self.pos, 1)};
        } else if ((($b = match_data = self.$phrase()['$[]'](self.$pos())['$matches?'](self.$cursor())) !== nil && (!$b.$$is_boolean || $b == true))) {
          if ((($b = match_data['$is_a?']($scope.get('MatchData'))) !== nil && (!$b.$$is_boolean || $b == true))) {
            new_character_index = $rb_plus(self.$cursor().$offset(), match_data.$to_s().$length());
            self.match_data['$merge!']($scope.get('Hash')['$[]'](match_data.$names().$zip(match_data.$captures())));
            cursor_pos = ($b = ($c = self.$cursor().$tokens()).$index, $b.$$p = (TMP_2 = function(token){var self = TMP_2.$$s || this;
if (token == null) token = nil;
            return $rb_ge(token.$pos(), new_character_index)}, TMP_2.$$s = self, TMP_2), $b).call($c);
            if (cursor_pos !== false && cursor_pos !== nil) {
              } else {
              cursor_pos = self.$cursor().$tokens().$length()
            };
            self.$cursor().$instance_variable_set("@pos", cursor_pos);
            self.pos = $rb_plus(self.pos, 1);
            } else {
            if (match_data['$=='](true)) {
              } else {
              self.match_data['$merge!'](match_data)
            };
            self.pos = $rb_plus(self.pos, 1);
          };
          while ((($d = ($e = self.$phrase()['$[]'](self.$pos()), $e !== false && $e !== nil ?self.$phrase()['$[]'](self.$pos())['$whitespace?']() : $e)) !== nil && (!$d.$$is_boolean || $d == true))) {
          self.pos = $rb_plus(self.pos, 1)};
          self.state = "found";
          if (self.$pos()['$=='](self.$phrase().$length())) {
            return (($scope.get('Attentive')).$$scope.get('Match')).$new(self.$phrase(), self.match_params.$merge($hash2(["match_data"], {"match_data": self.match_data})))};
        } else if ((($b = token['$skippable?']()['$!']()) !== nil && (!$b.$$is_boolean || $b == true))) {
          self.state = "mismatch";
          break;;};
        self.$cursor().$pop();
        if ((($b = self.$cursor().$peek()) !== nil && (!$b.$$is_boolean || $b == true))) {
          } else {
          break;
        };
        while ((($d = self.$cursor().$peek()['$whitespace?']()) !== nil && (!$d.$$is_boolean || $d == true))) {
        self.$cursor().$pop();
        if ((($d = self.$cursor().$peek()) !== nil && (!$d.$$is_boolean || $d == true))) {
          } else {
          break;
        };};};
        return nil;
      });

      return (Opal.defn(self, '$match_subphrase!', function(subphrases) {try {

        var $a, $b, TMP_3, self = this;

        ($a = ($b = subphrases).$each, $a.$$p = (TMP_3 = function(subphrase){var self = TMP_3.$$s || this, $a, matcher = nil;
if (subphrase == null) subphrase = nil;
        matcher = $scope.get('Matcher').$new(self.$phrase(), $scope.get('Cursor').$new(subphrase), $hash2(["pos"], {"pos": self.$pos()}));
          matcher['$match!']();
          if ((($a = matcher['$mismatch?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            self.pos = matcher.$pos();
            Opal.ret(true);
          };}, TMP_3.$$s = self, TMP_3), $a).call($b);
        return false;
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      }), nil) && 'match_subphrase!';
    })($scope.base, null)
  })($scope.base);
};

/* Generated by Opal 0.9.2 */
Opal.modules["attentive/listener_collection"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$==', '$is_a?', '$last', '$pop', '$tap', '$push', '$new', '$select', '$matches_context?', '$each_with_index', '$each', '$match!', '$tokens', '$phrases']);
  self.$require("attentive");
  if ($scope.get('RUBY_ENGINE')['$==']("opal")) {};
  self.$require("delegate");
  self.$require("attentive/cursor");
  self.$require("attentive/listener");
  self.$require("attentive/matcher");
  return (function($base) {
    var $Attentive, self = $Attentive = $module($base, 'Attentive');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $ListenerCollection(){};
      var self = $ListenerCollection = $klass($base, $super, 'ListenerCollection', $ListenerCollection);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

      Opal.defn(self, '$initialize', TMP_1 = function() {
        var self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

        TMP_1.$$p = null;
        return Opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [(function() {if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
          return []}; return nil; })()]);
      });

      Opal.defn(self, '$listen_for', TMP_2 = function() {
        var $a, $b, TMP_3, self = this, $iter = TMP_2.$$p, block = $iter || nil, options = nil, $splat_index = nil;

        var array_size = arguments.length - 0;
        if(array_size < 0) array_size = 0;
        var args = new Array(array_size);
        for($splat_index = 0; $splat_index < array_size; $splat_index++) {
          args[$splat_index] = arguments[$splat_index + 0];
        }
        TMP_2.$$p = null;
        options = (function() {if ((($a = args.$last()['$is_a?'](Opal.get('Hash'))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return args.$pop()
          } else {
          return $hash2([], {})
        }; return nil; })();
        return ($a = ($b = (($scope.get('Attentive')).$$scope.get('Listener')).$new(self, args, options, block)).$tap, $a.$$p = (TMP_3 = function(listener){var self = TMP_3.$$s || this;
if (listener == null) listener = nil;
        return self.$push(listener)}, TMP_3.$$s = self, TMP_3), $a).call($b);
      });

      return (Opal.defn(self, '$hear', function(message) {
        var $a, $b, TMP_4, $c, TMP_5, self = this, listeners = nil, matches = nil;

        listeners = ($a = ($b = self).$select, $a.$$p = (TMP_4 = function(listener){var self = TMP_4.$$s || this;
if (listener == null) listener = nil;
        return listener['$matches_context?'](message)}, TMP_4.$$s = self, TMP_4), $a).call($b);
        matches = [];
        ($a = ($c = message.$tokens()).$each_with_index, $a.$$p = (TMP_5 = function(token, i){var self = TMP_5.$$s || this, $a, $b, TMP_6;
if (token == null) token = nil;if (i == null) i = nil;
        return ($a = ($b = listeners).$each, $a.$$p = (TMP_6 = function(listener){var self = TMP_6.$$s || this, $a, $b, TMP_7;
if (listener == null) listener = nil;
          return ($a = ($b = listener.$phrases()).$each, $a.$$p = (TMP_7 = function(phrase){var self = TMP_7.$$s || this, match = nil;
if (phrase == null) phrase = nil;
            match = (($scope.get('Attentive')).$$scope.get('Matcher')).$new(phrase, $scope.get('Cursor').$new(message.$tokens(), i), $hash2(["listener", "message"], {"listener": listener, "message": message}))['$match!']();
              if (match !== false && match !== nil) {
                } else {
                return nil;
              };
              matches.$push(match);
              return ($breaker.$v = nil, $breaker);}, TMP_7.$$s = self, TMP_7), $a).call($b)}, TMP_6.$$s = self, TMP_6), $a).call($b)}, TMP_5.$$s = self, TMP_5), $a).call($c);
        return matches;
      }), nil) && 'hear';
    })($scope.base, $scope.get('SimpleDelegator'))
  })($scope.base);
};

/* Generated by Opal 0.9.2 */
(function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$extend', '$invocations=', '$freeze', '$new', '$listen_for', '$to_proc', '$listeners', '$is_a?', '$hear']);
  self.$require("attentive/version");
  self.$require("attentive/config");
  (function($base) {
    var $Attentive, self = $Attentive = $module($base, 'Attentive');

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

    self.$extend((($scope.get('Attentive')).$$scope.get('Config')));

    (($a = [["@me".$freeze()]]), $b = self, $b['$invocations='].apply($b, $a), $a[$a.length-1]);

    Opal.defn(self, '$listeners', function() {
      var $a, self = this;
      if (self.listeners == null) self.listeners = nil;

      return ((($a = self.listeners) !== false && $a !== nil) ? $a : self.listeners = (($scope.get('Attentive')).$$scope.get('ListenerCollection')).$new());
    });

    Opal.defn(self, '$listen_for', TMP_1 = function() {
      var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 0];
      }
      TMP_1.$$p = null;
      return ($a = ($b = self.$listeners()).$listen_for, $a.$$p = block.$to_proc(), $a).apply($b, Opal.to_a(args));
    });

    Opal.defn(self, '$hear', function(message, params) {
      var $a, self = this;

      if (params == null) {
        params = $hash2([], {})
      }
      if ((($a = message['$is_a?']((($scope.get('Attentive')).$$scope.get('Message')))) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        message = (($scope.get('Attentive')).$$scope.get('Message')).$new(message, params)
      };
      return self.$listeners().$hear(message);
    });
  })($scope.base);
  self.$require("attentive/listener_collection");
  return self.$require("attentive/message");
})(Opal);
